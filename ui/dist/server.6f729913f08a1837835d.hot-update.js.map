{"version":3,"sources":["webpack:///./src/IssueList.jsx"],"names":["IssueList","React","Component","constructor","issues","store","initialData","issueList","selectedIssue","issue","state","closeIssue","bind","deleteIssue","componentDidMount","loadData","componentDidUpdate","prevProps","location","search","prevSearch","match","params","id","prevId","props","fetchData","showError","URLSearchParams","vars","hasSelection","selectedId","get","status","effortMin","parseInt","Number","isNaN","effortMax","idInt","query","data","graphQLFetch","index","setState","prevState","newList","issueUpdate","pathname","history","showSuccess","issueDelete","push","splice","render","IssueListWithToast","withToast"],"mappings":"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","file":"server.6f729913f08a1837835d.hot-update.js","sourcesContent":["import React from 'react';\n\nimport IssueFilter from './IssueFilter.jsx';\nimport IssueTable from './IssueTable.jsx';\nimport IssueDetail from './IssueDetail.jsx';\n\nimport graphQLFetch from './graphQLFetch.js';\nimport Toast from './Toast.jsx';\nimport URLSearchParams from 'url-search-params';\nimport { Panel } from 'react-bootstrap';\nimport store from './store.js';\nimport withToast from './withToast.jsx';\n\n\n{/**parent */}\n{/**you should be able to use double quotes in the title of a newly added issue without causing any errors. */}\nclass IssueList extends React.Component { \n    constructor() {\n        super();\n        const issues = store.initialData ? store.initialData.issueList : null;\n        const selectedIssue = store.initialData ? store.initialData.issue : null;\n        delete store.initialData;\n        this.state = { issues,\n                       selectedIssue,\n                       };\n        {/**to make this always refer to IssueList, otherwise, this.state would be undefined */}\n        this.closeIssue = this.closeIssue.bind(this);\n        this.deleteIssue = this.deleteIssue.bind(this);\n    }\n\n    componentDidMount() {\n        const { issues } = this.state;\n        if (issues == null) this.loadData();\n    }\n\n    componentDidUpdate(prevProps) {\n        const { location: { search: prevSearch }, match: { params: {id: prevId }} } = prevProps;\n        const { location: { search }, match: {params:{id}} } = this.props;\n        if (prevSearch !== search || prevId !== id) {\n            this.loadData();\n        }\n    }\n\n    static async fetchData(match, search, showError) {\n        const params = new URLSearchParams(search);\n        const vars = { hasSelection: false, selectedId: 0 };\n        if (params.get('status')) vars.status = params.get('status');\n\n        const effortMin = parseInt(params.get('effortMin'), 10);\n        if (!Number.isNaN(effortMin)) vars.effortMin = effortMin;\n        const effortMax = parseInt(params.get('effortMax'), 10);\n        if (!Number.isNaN(effortMax)) vars.effortMax = effortMax;\n\n        const { params: {id} } = match;\n        const idInt = parseInt(id, 10);\n        if (!Number.isNaN(idInt)) {\n            vars.hasSelection= true;\n            vars.selectedId = idInt;\n        }\n\n        const query = `query issueList(\n            $status: StatusType\n            $effortMin: Int\n            $effortMax: Int\n            $hasSelection: Boolean!\n            $selectedId: Int!\n        ) {\n          issueList (\n              status: $status\n              effortMin: $effortMin\n              effortMax: $effortMax\n          ) {\n              issues {\n                id title status owner\n                created effort due\n              }\n          }\n          issue(id: $selectedId) @include (if : $hasSelection) {\n              id description\n          }\n        }`;\n    \n        const data = await graphQLFetch(query,vars,showError);\n        return data;\n      }\n\n    async closeIssue(index) {\n        const query = `mutation issueClose($id: Int!) {\n            issueUpdate(id:$id, changes: { status: Closed }) {\n                id title status owner effort\n                created due description\n            }\n        }`;\n        const { issues } = this.state;\n        const { showError } = this.props;\n        const data = await graphQLFetch(query, { id: issues[index].id }, showError);\n        if (data) {\n            this.setState((prevState) => {\n                const newList = [...prevState.issues];\n                newList[index] = data.issueUpdate;\n                return { issues: newList };\n            });\n        } else {\n            this.loadData();\n        }\n    }\n\n    async deleteIssue(index) {\n        const query = `mutation issueDelete($id: Int!) {\n            issueDelete(id: $id)\n        }`;\n        const { issues } = this.state;\n        const { location: { pathname,search }, history } = this.props;\n        const { id } = issues[index];\n        const { showSuccess, showError } = this.props;\n        const data = await graphQLFetch(query, {id}, showError);\n        if (data && data.issueDelete) {\n            this.setState((prevState) => {\n                const newList = [...prevState.issues];\n                if (pathname === `/issues/${id}`) {\n                    history.push({ pathname: '/issues', search });\n                }\n                newList.splice(index, 1);\n                return { issues: newList };\n            });\n            showSuccess(`Deleted issue ${id} successfully.`);\n        } else {\n            this.loadData();\n        }\n    }\n\n    async loadData() {\n        const { location: {search}, match, showError } = this.props;\n        const data = await IssueList.fetchData(match, search, showError);\n        if (data) {\n            this.setState({ issues: data.issueList, selectedIssue: data.issue });\n        }\n    }\n\n    render() {\n        const { issues } = this.state;\n        if (issues == null) return null;\n        const { selectedIssue } = this.state;\n\n        return (\n            <React.Fragment>\n                <Panel>\n                    <Panel.Heading>\n                        <Panel.Title toggle>Filter</Panel.Title>\n                    </Panel.Heading>\n                    <Panel.Body collapsible>\n                        <IssueFilter urlBase=\"/issues\" />\n                    </Panel.Body>\n                </Panel>\n                <hr />\n                <IssueTable issues={issues} closeIssue={this.closeIssue} deleteIssue={this.deleteIssue} />\n                {/** let’s use the path as matched in the parent component, using this.props.match.path. This is so that even if the parent path changes for any reason, the change is isolated to one place. */}\n                <IssueDetail issue={selectedIssue} /> \n            </React.Fragment>\n        );\n    }\n}\n\nconst IssueListWithToast = withToast(IssueList);\nIssueListWithToast.fetchData = IssueList.fetchData; //copy the reference of the component’s static methods to the wrapped component too, to make it visible.\n\nexport default IssueListWithToast;"],"sourceRoot":""}