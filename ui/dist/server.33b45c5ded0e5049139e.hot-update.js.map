{"version":3,"sources":["webpack:///./src/IssueEdit.jsx"],"names":["IssueEdit","React","Component","fetchData","match","search","showError","query","params","id","result","graphQLFetch","parseInt","constructor","issue","store","initialData","state","invalidFields","showingValidation","onChange","bind","handleSubmit","onValidityChange","componentDidMount","loadData","componentDidUpdate","prevProps","prevId","props","event","naturalValue","name","value","textValue","target","undefined","setState","prevState","e","preventDefault","showValidation","showSuccess","Object","keys","length","created","changes","data","issueUpdate","valid","dismissValidation","message","toastVisible","toastMessage","toastType","dismissToast","render","propsId","title","status","owner","effort","description","due","validationMessage","ControlLabel","toDateString","TextInput","NumInput","DateInput"],"mappings":"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","file":"server.33b45c5ded0e5049139e.hot-update.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { Col, Panel, Form, FormGroup, FormControl, ControlLabel,\n            ButtonToolbar, Button, Alert } from 'react-bootstrap';\n\nimport graphQLFetch from './graphQLFetch.js';\nimport NumInput from './NumInput.jsx';\nimport DateInput from './DateInput.jsx';\nimport TextInput from './TextInput.jsx';\nimport withToast from './withToast.jsx';\nimport store from './store.js';\n\nclass IssueEdit extends React.Component {\n    static async fetchData(match, search, showError) {\n        const query = `query issue($id: Int!) {\n            issue(id: $id) {\n                id title status owner\n                effort created due description\n            }\n        }`;\n\n        const { params: {id} } = match;\n        const result = await graphQLFetch(query, {id: parseInt(id, 10)}, showError);\n        return result;\n    }\n\n    constructor() {\n        super();\n        const issue = store.initialData ? store.initialData.issue : null;\n        delete store.initialData;\n        this.state = {\n            issue,\n            invalidFields: {},\n            showingValidation: false,\n        };\n        this.onChange = this.onChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.onValidityChange = this.onValidityChange.bind(this);\n    }\n\n    componentDidMount() {\n        const { issue } = this.state;\n        if (issue == null) this.loadData();\n    }\n\n    componentDidUpdate(prevProps) {\n        const { match: { params: { id: prevId } } } = prevProps;\n        const { match: { params: { id } } } = this.props;\n        if (id !== prevId) {\n            this.loadData();\n        }\n    }\n\n    onChange(event, naturalValue) {\n        const { name, value: textValue } = event.target;\n        const value = naturalValue === undefined ? textValue : naturalValue;\n        this.setState(prevState => ({\n            issue: { ...prevState.issue, [name]: value },\n        }));\n    }\n    \n    async handleSubmit(e) {\n        e.preventDefault();\n        this.showValidation();\n        const { issue, invalidFields } = this.state;\n        const { showSuccess, showError } = this.props;\n        if (Object.keys(invalidFields).length !== 0) return;\n\n        const query = `mutation issueUpdate(\n            $id: Int!\n            $changes: IssueUpdateInputs!\n        ) {\n            issueUpdate(\n                id: $id\n                changes: $changes\n            ) {\n                id title status owner\n                effort created due description\n            }\n        }`;\n\n        const { id, created, ...changes } = issue;\n        const data = await graphQLFetch(query, { changes,id }, this.showError);\n        if (data) {\n            this.setState({ issue: data.issueUpdate });\n            showSuccess('Updated issue successfully');\n        }\n    }\n\n    onValidityChange(event, valid) {\n        const { name } = event.target;\n        this.setState((prevState) => {\n            const invalidFields = { ...prevState.invalidFields, [name]: !valid };\n            if (valid) delete invalidFields[name];\n            return { invalidFields };\n        });\n    }\n\n    async loadData() {\n        const { match } = this.props;\n        const data = await IssueEdit.fetchData(match, null, this.showError);\n        this.setState({ issue: data ? data.issue : {}, invalidFields: {} });\n    }\n\n    showValidation() {\n        this.setState({ showingValidation: true });\n    }\n\n    dismissValidation() {\n        this.setState({ showingValidation: false });\n    }\n\n    showSuccess(message) {\n        this.setState({\n            toastVisible: true, toastMessage: message, toastType: 'success'\n        });\n    }\n\n    showError(message) {\n        this.setState({\n            toastVisible: true, toastMessage: message, toastType: 'danger'\n        });\n    }\n\n    dismissToast() {\n        this.setState({ toastVisible: false });\n    }\n\n    render() {\n        const { issue } = this.state;\n        if (issue == null) return null;\n        const { issue: { id }} = this.state;\n        const { toastVisible, toastMessage, toastType } = this.state;\n        const { match: { params: { id: propsId } } } = this.props;\n        if ( id == null ) {\n            if (propsId != null) {\n                return <h3>{`Isssue with ID ${propsId} not found.`}</h3>;\n            }\n            return null;\n        }\n\n        const { issue: { title, status } } = this.state;\n        const { issue: { owner, effort, description } } = this.state;\n        const { issue: { created, due } } = this.state;\n        const { invalidFields, showingValidation } = this.state;\n        let validationMessage;\n        if (Object.keys(invalidFields).length !== 0 && showingValidation) {\n            validationMessage = (\n                <Alert bsStyle=\"danger\" onDismiss={this.dismissValidation}>\n                    Please correct invalid fields before submitting.\n                </Alert>\n            );\n        }\n\n        return (\n            <Panel>\n                <Panel.Heading>\n                    <Panel.Title>{`Editing issue: ${id}`}</Panel.Title>\n                </Panel.Heading>\n                <Panel.Body>\n                    <Form horizontal onSubmit={this.handleSubmit}>\n                        <FormGroup>\n                            <Col componentClass={ControlLabel} sm={3}>Created</Col>\n                            <Col sm={9}>\n                                <FormControl.Static>\n                                   {created.toDateString()} \n                                </FormControl.Static>\n                            </Col>\n                        </FormGroup>\n                        <FormGroup>\n                            <Col componentClass={ControlLabel} sm={3}>Status</Col>\n                            <Col sm={9}>\n                                <FormControl componentClass=\"select\" name=\"status\" value={status} onChange={this.onChange}>\n                                    <option value=\"New\">New</option>\n                                    <option value=\"Assigned\">Assigned</option>\n                                    <option value=\"Fixed\">Fixed</option>\n                                    <option value=\"Closed\">Closed</option>\n                                </FormControl>\n                            </Col>\n                        </FormGroup>\n                        <FormGroup>\n                            <Col componentClass={ControlLabel} sm={3}>Owner</Col>\n                            <Col sm={9}>\n                                <FormControl componentClass={TextInput} name=\"owner\" value={owner} onChange={this.onChange} key={id} />\n                            </Col>\n                        </FormGroup>\n                        <FormGroup>\n                            <Col componentClass={ControlLabel} sm={3}>Effort</Col>\n                            <Col sm={9}>\n                                <FormControl componentClass={NumInput} name=\"effort\" value={effort} onChange={this.onChange} key={id} />\n                            </Col>\n                        </FormGroup>\n                        <FormGroup validationState={invalidFields.due ? 'error' : null}>\n                            <Col componentClass={ControlLabel} sm={3}>Due</Col>\n                            <Col sm={9}>\n                                <FormControl componentClass={DateInput} onValidityChange={this.onValidityChange} name=\"due\" value={due} onChange={this.onChange} key={id} />\n                                <FormControl.Feedback />\n                            </Col>\n                        </FormGroup>\n                        <FormGroup>\n                            <Col componentClass={ControlLabel} sm={3}>Title</Col>\n                            <Col sm={9}>\n                                <FormControl componentClass={TextInput} size={50} name=\"title\" value={title} onChange={this.onChange} key={id} />\n                            </Col>\n                        </FormGroup>\n                        <FormGroup>\n                            <Col componentClass={ControlLabel} sm={3}>Description</Col>\n                            <Col sm={9}>\n                                <FormControl componentClass={TextInput} tag=\"textarea\" rows={4} cols={50} name=\"description\" value={description} onChange={this.onChange} key={id} />\n                            </Col>\n                        </FormGroup>\n                        <FormGroup>\n                            <Col smOffset={3} sm={6}>\n                                <ButtonToolbar>\n                                    <Button bsStyle=\"primary\" type=\"submit\">Submit</Button>\n                                    <LinkContainer to=\"/issues\">\n                                        <Button bsStyle=\"link\">Back</Button>\n                                    </LinkContainer>\n                                </ButtonToolbar>\n                            </Col>\n                        </FormGroup>\n                        <FormGroup>\n                            <Col smOffset={3} sm={9}>{validationMessage}</Col>\n                        </FormGroup>\n                    </Form>\n                </Panel.Body>\n                <Panel.Footer>\n                    <Link to={`/edit/${id - 1}`}>Prev</Link>\n                    {' | '}\n                    <Link to={`/edit/${id + 1}`}>Next</Link>\n                </Panel.Footer> \n                <Toast showing={toastVisible} onDismiss={this.dismissToast} bsStyle={toastType}>\n                    {toastMessage}\n                </Toast>         \n            </Panel>\n        );\n    }  \n}"],"sourceRoot":""}